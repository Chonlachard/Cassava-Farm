import { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CassavaAreaServiceService } from '../cassava-area-service.service';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { take } from 'rxjs';

@Component({
  selector: 'app-edit-planted',
  templateUrl: './edit-planted.component.html',
  styleUrls: ['./edit-planted.component.css']
})

export class EditPlantedComponent implements OnInit {

  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;
  autoGeneratedName: string = '';
  plantedAreaForm!: FormGroup;
  mapCenter = { lat: 13.7563, lng: 100.5018 };  // ค่าเริ่มต้นของศูนย์กลางแผนที่
  zoom = 10;
  polygonCoords: google.maps.LatLngLiteral[] = [];
  polygonOptions: google.maps.PolygonOptions = {
    editable: true,
    draggable: true,
    fillColor: 'red',
    fillOpacity: 0.3,
    strokeColor: 'red',
    strokeOpacity: 0.8,
    strokeWeight: 2,
  };
  isDragging = false;
  currentLocationMarker: google.maps.LatLngLiteral | null = null;
  areaInRai = 0;
  areaInNgan = 0;
  markers: google.maps.Marker[] = [];
  userId: string = '';
  plot_id: string = '';
  existingPlotNames: string[] = [];
  map!: google.maps.Map;
  private staticMapsApiUrl = 'https://maps.googleapis.com/maps/api/staticmap';

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private plantedAreaService: CassavaAreaServiceService,
    private dialogRef: MatDialogRef<EditPlantedComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) { }

  ngOnInit(): void {
    this.plot_id = this.data.plot_id;
    this.userId = localStorage.getItem('userId') || '';
    this.initForm();
    this.loadPlotData();
  }

  initForm(): void {
    this.plantedAreaForm = this.fb.group({
      plot_name: [''],
      area_rai: ['', [Validators.required]], 
      searchQuery: [''],
    });
  }

  loadPlotData(): void {
    this.plantedAreaService.getPlotById(this.plot_id).pipe(take(1)).subscribe({
      next: (data) => {
        console.log('Plot data:', data);
        this.plantedAreaForm.patchValue(data);
        this.autoGeneratedName = data.plot_name;
        // แปลงพิกัด latitudes และ longitudes ให้เป็น LatLngLiteral[]
        this.polygonCoords = data.latitudes.map((lat: string, index: number) => {
          return {
            lat: parseFloat(lat),
            lng: parseFloat(data.longitudes[index])
          };
        });
        this.calculateArea();
        this.updateMarkersOnMap();
        this.setMapCenter(); // เรียกฟังก์ชันเพื่อเซ็ตศูนย์กลางของแผนที่
      },
      error: (err) => {
        console.error('Error loading plot data:', err);
      },
    });
  }

  updateMarkersOnMap(): void {
    // ลบ markers เก่าก่อนที่จะเพิ่มใหม่
    this.markers.forEach(marker => marker.setMap(null));
    this.markers = [];

    // สร้าง marker สำหรับแต่ละพิกัด
    this.polygonCoords.forEach(coord => {
      const marker = new google.maps.Marker({
        position: coord,
        map: this.map, // ใช้ map ที่ประกาศไว้
        title: 'Plot Location'
      });
      this.markers.push(marker);
    });
  }

  setMapCenter(): void {
    if (this.polygonCoords.length > 0) {
      const latitudes = this.polygonCoords.map(coord => coord.lat);
      const longitudes = this.polygonCoords.map(coord => coord.lng);

      // คำนวณค่ากลางจากพิกัดทั้งหมด
      const centerLat = latitudes.reduce((sum, lat) => sum + lat, 0) / latitudes.length;
      const centerLng = longitudes.reduce((sum, lng) => sum + lng, 0) / longitudes.length;

      // ตั้งค่าศูนย์กลางของแผนที่
      const mapOptions: google.maps.MapOptions = {
        center: { lat: centerLat, lng: centerLng },
        zoom: this.zoom,
      };

      this.map = new google.maps.Map(this.mapContainer.nativeElement, mapOptions);
    }
  }

  calculateArea(): void {
    if (this.polygonCoords.length < 3) {
      this.areaInRai = 0;
      this.areaInNgan = 0;
      return;
    }

    const polygonPath = this.polygonCoords.map(coord => new google.maps.LatLng(coord.lat, coord.lng));
    const areaInSquareMeters = google.maps.geometry.spherical.computeArea(polygonPath);
    const areaInSquareWah = areaInSquareMeters / 4;
    const areaInRai = Math.floor(areaInSquareWah / 400);
    const remainingWah = areaInSquareWah % 400;
    const areaInNgan = Math.floor(remainingWah / 100);

    this.areaInRai = areaInRai;
    this.areaInNgan = areaInNgan;
    this.plantedAreaForm.get('area_rai')?.setValue(this.areaInRai.toString());
  }

  onSearchPlace(): void { }
  onClearPolygon(): void { }
  onCurrentLocation(): void { }

  onDragStart(): void { }
  onDragEnd(): void { }
  onPolygonEdit(event: google.maps.MapMouseEvent): void {
    const path = event.latLng;
    if (path) {
      this.polygonCoords = [...this.polygonCoords, path.toJSON()];
      this.calculateArea();
    }
  }

  // ฟังก์ชันสำหรับการบันทึกข้อมูล
  onSubmit(): void {
    //   if (this.plantedAreaForm.valid) {
    //     const formData = this.plantedAreaForm.value;
    //     if (this.plot_id) {
    //       this.plantedAreaService.updatePlot(this.plot_id, formData).subscribe({
    //         next: (data) => {
    //           console.log('Update successful:', data);
    //           this.dialogRef.close(true); // ปิด Dialog และส่งค่าผลลัพธ์เป็น true
    //         },
    //         error: (err) => {
    //           console.error('Error updating plot:', err);
    //         },
    //       });
    //     }
    //   } else {
    //     console.error('Form is invalid');
    //   }
    // }
  }
}
