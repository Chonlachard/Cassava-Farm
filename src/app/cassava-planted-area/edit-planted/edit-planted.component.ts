import { Component, ElementRef, EventEmitter, Inject, Input, OnInit, Output, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CassavaAreaServiceService } from '../cassava-area-service.service';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { take } from 'rxjs';
import Swal from 'sweetalert2';
import { MapGeocoder } from '@angular/google-maps';
import { HttpClient } from '@angular/common/http';
import * as turf from '@turf/turf';

@Component({
  selector: 'app-edit-planted',
  templateUrl: './edit-planted.component.html',
  styleUrls: ['./edit-planted.component.css']
})

export class EditPlantedComponent implements OnInit {
  @Output() closeForm = new EventEmitter<void>();
  @Input() plot_id!: number; 
  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;
  autoGeneratedName: string = '';
  plantedAreaForm!: FormGroup;
  mapCenter = { lat: 13.7563, lng: 100.5018 };  // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  zoom = 10;
  polygonCoords: google.maps.LatLngLiteral[] = [];
  polygonOptions: google.maps.PolygonOptions = {
    editable: true,
    draggable: true,
    fillColor: 'red',
    fillOpacity: 0.3,
    strokeColor: 'red',
    strokeOpacity: 0.8,
    strokeWeight: 2,
  };
  isDragging = false;
  currentLocationMarker: google.maps.LatLngLiteral | null = null;
  areaInRai = 0;
  areaInNgan = 0;
  markers: google.maps.Marker[] = [];
  userId: string = '';

  existingPlotNames: string[] = [];
  areaText = '0 ‡πÑ‡∏£‡πà 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤';
  map!: google.maps.Map;
  private staticMapsApiUrl = 'https://maps.googleapis.com/maps/api/staticmap';

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private plantedAreaService: CassavaAreaServiceService,
    private geocoder: MapGeocoder,
    private http: HttpClient,
  ) { }

  ngOnInit(): void {
    if (!this.plot_id) {
        console.error('‚ùå plot_id is not provided!');
        this.showErrorAlert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
        return;
    }

    this.userId = localStorage.getItem('userId') || '';
    this.initForm();
    this.loadPlotData();
  }

  initForm(): void {
    this.plantedAreaForm = this.fb.group({
      plot_name: ['', Validators.required],
      area_rai: ['', Validators.required],
      searchQuery: ['']
    });
  }

  loadPlotData(): void {
    debugger
    if (!this.plot_id) return;

    this.plantedAreaService.getPlotById(this.plot_id).pipe(take(1)).subscribe({
      next: (data) => {
        if (!data) {
          this.showErrorAlert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á');
          return;
        }

        console.log("üìå API Data Received:", data);

        this.plantedAreaForm.patchValue({
            plot_name: data.plot_name,
            area_rai: data.total_area 
        });

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡πà‡∏≠‡∏ô `split()`
        const latitudes = typeof data.latitudes === "string" ? data.latitudes.split(',') : data.latitudes;
        const longitudes = typeof data.longitudes === "string" ? data.longitudes.split(',') : data.longitudes;
       

        if (!latitudes || !longitudes || latitudes.length !== longitudes.length || latitudes.length === 0) {
          this.showErrorAlert("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡∏µ‡πâ");
          return;
        }

        // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (NaN)
        this.polygonCoords = latitudes.map((lat: string, index: number) => {
          const latParsed = parseFloat(lat);
          const lngParsed = parseFloat(longitudes[index]);
          return isNaN(latParsed) || isNaN(lngParsed) ? null : { lat: latParsed, lng: lngParsed };
        }).filter(Boolean);

        console.log("üìå Final Polygon Coordinates:", this.polygonCoords);

      

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        setTimeout(() => {
          this.setMapCenter();
          this.updateMarkersOnMap();
        }, 500);

      },
      error: () => {
        this.showErrorAlert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á");
      },
    });
}


  updateMarkersOnMap(): void {
    // ‡∏•‡∏ö markers ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    this.markers.forEach(marker => marker.setMap(null));
    this.markers = [];

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏¥‡∏Å‡∏±‡∏î
    this.polygonCoords.forEach(coord => {
      const marker = new google.maps.Marker({
        position: coord,
        map: this.map, // ‡πÉ‡∏ä‡πâ map ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ
        title: 'Plot Location'
      });
      this.markers.push(marker);
      console.log("üìç Marker added at:", coord.lat, coord.lng, "Map:", this.map);
    });
  }
  onSearchPlace(): void {
    const searchQuery = this.plantedAreaForm.get('searchQuery')?.value;

    if (!searchQuery) {
      this.showErrorAlert('‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
      return;
    }

    this.geocoder.geocode({ address: searchQuery }).subscribe((result) => {
      if (result.results.length > 0) {
        this.mapCenter = result.results[0].geometry.location.toJSON();
        this.zoom = 15;
        // this.updateMap(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
      } else {
        this.showErrorAlert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
      }
    }, error => {
      console.error('Error during geocoding:', error);
      this.showErrorAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    });
  }

  setMapCenter(): void {
    if (this.polygonCoords.length > 0) {
        const latitudes = this.polygonCoords.map(coord => coord.lat);
        const longitudes = this.polygonCoords.map(coord => coord.lng);

        const centerLat = latitudes.reduce((sum, lat) => sum + lat, 0) / latitudes.length;
        const centerLng = longitudes.reduce((sum, lng) => sum + lng, 0) / longitudes.length;

        this.mapCenter = { lat: centerLat, lng: centerLng };
        this.zoom = 16;

        if (this.map) {
            this.map.setCenter(this.mapCenter);
        }
    }
  }


  calculateArea(): void {
    if (this.polygonCoords.length < 3) {
      this.areaInRai = 0;
      this.areaText = "0 ‡πÑ‡∏£‡πà 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤";
      return;
    }
  
    // ‡∏õ‡∏¥‡∏î Polygon ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const closedPolygonCoords = [...this.polygonCoords, this.polygonCoords[0]];
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á GeoJSON Polygon
    const polygonGeoJSON = turf.polygon([closedPolygonCoords.map(coord => [coord.lng, coord.lat])]);
  
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    const areaInSquareMeters = turf.area(polygonGeoJSON);
  
    // ‡πÅ‡∏õ‡∏•‡∏á ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£ -> ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ -> ‡πÑ‡∏£‡πà-‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤
    const areaInSquareWah = areaInSquareMeters / 4;
    const areaInRai = Math.floor(areaInSquareWah / 400);
    const remainingWah = Math.round(areaInSquareWah % 400);
  
    this.areaInRai = areaInRai;
    this.areaText = `${this.areaInRai} ‡πÑ‡∏£‡πà ${remainingWah} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤`;
  
    this.plantedAreaForm.get('area_rai')?.setValue(this.areaText);
  }

  
  

  onClearPolygon(): void {
    this.polygonCoords = [];
    this.currentLocationMarker = null;
    this.areaInRai = 0;
    this.areaInNgan = 0;
    this.markers = [];
  }

  onCurrentLocation(): void {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          this.mapCenter = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          this.zoom = 15;
          // this.updateMap(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        },
        (error) => {
          console.error('Error getting current location', error);
          this.showErrorAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ');
        }
      );
    } else {
      this.showErrorAlert('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á');
    }
  }

  onDragStart(): void {
    this.isDragging = true;
  }
  onDragEnd(): void {
    this.isDragging = false;
  }
  onPolygonEdit(event: google.maps.MapMouseEvent): void {
    const path = event.latLng;
    if (path) {
      this.polygonCoords = [...this.polygonCoords, path.toJSON()];
      this.calculateArea();
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  onSubmit(): void {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (this.plantedAreaForm.invalid) {
      this.showErrorAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!this.plot_id || !this.userId) {
      console.error('‚ùå plot_id ‡∏´‡∏£‡∏∑‡∏≠ userId ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤');
      this.showErrorAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ plot_id ‡∏´‡∏£‡∏∑‡∏≠ userId');
      return;
    }

    if (!this.polygonCoords || this.polygonCoords.length < 3) {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö');
      this.showErrorAlert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    // ‚úÖ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const formData = this.plantedAreaForm.value;
    const plotName = formData.plot_name;
    const areaRai = this.areaInRai;

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô LatLng[]
    const polygonLatLngs = this.polygonCoords.map(coord => new google.maps.LatLng(coord.lat, coord.lng));

    console.log('üìå Preparing to save plot data:', {
      plot_id: this.plot_id,
      user_id: this.userId,
      plot_name: plotName,
      area_rai: areaRai,
      latlngs: this.polygonCoords,
    });

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ captureMapImage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    this.captureMapImage(polygonLatLngs).then((imageUrl) => {
      if (!imageUrl) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ');
        this.showErrorAlert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà');
        return;
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      const plotData = {
        plot_id: this.plot_id,
        user_id: this.userId,
        plot_name: plotName,
        latlngs: this.polygonCoords,
        fileData: imageUrl,
      };

      console.log('üìå Sending data to API:', plotData);

      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà API
      this.plantedAreaService.updatePlot(plotData).pipe(take(1)).subscribe({
        next: () => {
          Swal.fire({
            icon: 'success',
            title: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            text: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß'
          });
          this.closeForm.emit();
        },
        error: (err) => {
          console.error('‚ùå Error updating plot:', err);
          this.showErrorAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
        }
      });

    }).catch((error) => {
      console.error('‚ùå Error capturing map image:', error);
      this.showErrorAlert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ');
    });
}

  
  
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Base64 ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  private captureMapImage(polygonCoords: google.maps.LatLng[]): Promise<string> {
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏•‡∏¥‡∏Å‡∏≠‡∏ô
    const center = this.calculatePolygonCenter(polygonCoords);
  
    const lat = center.lat();
    const lng = center.lng();
    const zoom = this.zoom;
    const imageSize = '1024x1024';
    const mapType = 'satellite';
    const scale = 2;
  
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å
    const closedPolygonCoords = [...polygonCoords, polygonCoords[0]];
  
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏û‡∏≠‡∏•‡∏¥‡∏Å‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠ API
    const polygonPath = closedPolygonCoords.map(coord => `${coord.lat()},${coord.lng()}`).join('|');
  
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏û‡∏≠‡∏•‡∏¥‡∏Å‡∏≠‡∏ô
    const mapImageUrl = `${this.staticMapsApiUrl}?center=${lat},${lng}&zoom=${zoom}&size=${imageSize}&maptype=${mapType}&scale=${scale}&path=color:0xFF0000%7Cweight:2%7C${polygonPath}&key=AIzaSyDF81bGnOY5TKIXzqN2wfWhTMZXMooP7LY&callback=initMap`;
  
    console.log('Map image URL:', mapImageUrl);
  
    return new Promise((resolve, reject) => {
      this.http.get(mapImageUrl, { responseType: 'blob' }).subscribe(
        (blob: Blob) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            const base64data = (reader.result as string).split(',')[1];
            resolve(`data:image/png;base64,${base64data}`);
          };
          reader.readAsDataURL(blob);
        },
        error => {
          console.error('Error fetching map image:', error);
          reject('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ');
        }
      );
    });
  }
  private calculatePolygonCenter(polygonCoords: google.maps.LatLng[]): google.maps.LatLng {
    let sumLat = 0;
    let sumLng = 0;
  
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    polygonCoords.forEach(coord => {
      sumLat += coord.lat();
      sumLng += coord.lng();
    });
  
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏•‡∏∞‡∏ï‡∏¥‡∏à‡∏π‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡∏à‡∏¥‡∏à‡∏π‡∏î
    const centerLat = sumLat / polygonCoords.length;
    const centerLng = sumLng / polygonCoords.length;
  
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LatLng
    return new google.maps.LatLng(centerLat, centerLng);
  }
  private showErrorAlert(message: string): void {
    Swal.fire({
      icon: 'error',
      title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      text: message
    });
  }
}
