import { Component, ElementRef, Inject, OnInit, ViewChild } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { CassavaAreaServiceService } from '../cassava-area-service.service';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { take } from 'rxjs';
import Swal from 'sweetalert2';
import { MapGeocoder } from '@angular/google-maps';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-edit-planted',
  templateUrl: './edit-planted.component.html',
  styleUrls: ['./edit-planted.component.css']
})

export class EditPlantedComponent implements OnInit {

  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;
  autoGeneratedName: string = '';
  plantedAreaForm!: FormGroup;
  mapCenter = { lat: 13.7563, lng: 100.5018 };  // ค่าเริ่มต้นของศูนย์กลางแผนที่
  zoom = 10;
  polygonCoords: google.maps.LatLngLiteral[] = [];
  polygonOptions: google.maps.PolygonOptions = {
    editable: true,
    draggable: true,
    fillColor: 'red',
    fillOpacity: 0.3,
    strokeColor: 'red',
    strokeOpacity: 0.8,
    strokeWeight: 2,
  };
  isDragging = false;
  currentLocationMarker: google.maps.LatLngLiteral | null = null;
  areaInRai = 0;
  areaInNgan = 0;
  markers: google.maps.Marker[] = [];
  userId: string = '';
  plot_id: string = '';
  existingPlotNames: string[] = [];
  map!: google.maps.Map;
  private staticMapsApiUrl = 'https://maps.googleapis.com/maps/api/staticmap';

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private plantedAreaService: CassavaAreaServiceService,
    private dialogRef: MatDialogRef<EditPlantedComponent>,
    private geocoder: MapGeocoder,
    private http: HttpClient,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) { }

  ngOnInit(): void {
    this.plot_id = this.data.plot_id;
    this.userId = localStorage.getItem('userId') || '';
    this.initForm();
    this.loadPlotData();
  }

  initForm(): void {
    this.plantedAreaForm = this.fb.group({
      plot_name: [''],
      area_rai: ['', [Validators.required]], 
      searchQuery: [''],
    });
  }

  loadPlotData(): void {
    this.plantedAreaService.getPlotById(this.plot_id).pipe(take(1)).subscribe({
      next: (data) => {
        console.log('Plot data:', data);
        this.plantedAreaForm.patchValue(data);
        this.autoGeneratedName = data.plot_name;
        // แปลงพิกัด latitudes และ longitudes ให้เป็น LatLngLiteral[]
        this.polygonCoords = data.latitudes.map((lat: string, index: number) => {
          return {
            lat: parseFloat(lat),
            lng: parseFloat(data.longitudes[index])
          };
        });
        this.calculateArea();
        this.updateMarkersOnMap();
        this.setMapCenter(); // เรียกฟังก์ชันเพื่อเซ็ตศูนย์กลางของแผนที่
      },
      error: (err) => {
        console.error('Error loading plot data:', err);
      },
    });
  }

  updateMarkersOnMap(): void {
    // ลบ markers เก่าก่อนที่จะเพิ่มใหม่
    this.markers.forEach(marker => marker.setMap(null));
    this.markers = [];

    // สร้าง marker สำหรับแต่ละพิกัด
    this.polygonCoords.forEach(coord => {
      const marker = new google.maps.Marker({
        position: coord,
        map: this.map, // ใช้ map ที่ประกาศไว้
        title: 'Plot Location'
      });
      this.markers.push(marker);
    });
  }
  onSearchPlace(): void {
    const searchQuery = this.plantedAreaForm.get('searchQuery')?.value;

    if (!searchQuery) {
      this.showErrorAlert('โปรดระบุที่อยู่ในการค้นหา');
      return;
    }

    this.geocoder.geocode({ address: searchQuery }).subscribe((result) => {
      if (result.results.length > 0) {
        this.mapCenter = result.results[0].geometry.location.toJSON();
        this.zoom = 15;
        // this.updateMap(); // อัปเดตตำแหน่งแผนที่
      } else {
        this.showErrorAlert('ไม่พบสถานที่ตามที่ค้นหา');
      }
    }, error => {
      console.error('Error during geocoding:', error);
      this.showErrorAlert('เกิดข้อผิดพลาดในการค้นหา');
    });
  }

  setMapCenter(): void {
    if (this.polygonCoords.length > 0) {
      const latitudes = this.polygonCoords.map(coord => coord.lat);
      const longitudes = this.polygonCoords.map(coord => coord.lng);

      // คำนวณค่ากลางจากพิกัดทั้งหมด
      const centerLat = latitudes.reduce((sum, lat) => sum + lat, 0) / latitudes.length;
      const centerLng = longitudes.reduce((sum, lng) => sum + lng, 0) / longitudes.length;

      // ตั้งค่าศูนย์กลางของแผนที่
      const mapOptions: google.maps.MapOptions = {
        center: { lat: centerLat, lng: centerLng },
        zoom: this.zoom,
      };

      this.map = new google.maps.Map(this.mapContainer.nativeElement, mapOptions);
    }
  }

  calculateArea(): void {
    if (this.polygonCoords.length < 3) {
      this.areaInRai = 0;
      this.areaInNgan = 0;
      return;
    }

    const polygonPath = this.polygonCoords.map(coord => new google.maps.LatLng(coord.lat, coord.lng));
    const areaInSquareMeters = google.maps.geometry.spherical.computeArea(polygonPath);
    const areaInSquareWah = areaInSquareMeters / 4;
    const areaInRai = Math.floor(areaInSquareWah / 400);
    const remainingWah = areaInSquareWah % 400;
    const areaInNgan = Math.floor(remainingWah / 100);

    this.areaInRai = areaInRai;
    this.areaInNgan = areaInNgan;
    this.plantedAreaForm.get('area_rai')?.setValue(this.areaInRai.toString());
  }

  
  

  onClearPolygon(): void {
    this.polygonCoords = [];
    this.currentLocationMarker = null;
    this.areaInRai = 0;
    this.areaInNgan = 0;
    this.markers = [];
  }

  onCurrentLocation(): void {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          this.mapCenter = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          this.zoom = 15;
          // this.updateMap(); // อัปเดตตำแหน่งแผนที่
        },
        (error) => {
          console.error('Error getting current location', error);
          this.showErrorAlert('ไม่สามารถระบุตำแหน่งปัจจุบันได้');
        }
      );
    } else {
      this.showErrorAlert('เบราว์เซอร์ของคุณไม่รองรับการระบุตำแหน่ง');
    }
  }

  onDragStart(): void {
    this.isDragging = true;
  }
  onDragEnd(): void {
    this.isDragging = false;
  }
  onPolygonEdit(event: google.maps.MapMouseEvent): void {
    const path = event.latLng;
    if (path) {
      this.polygonCoords = [...this.polygonCoords, path.toJSON()];
      this.calculateArea();
    }
  }

  // ฟังก์ชันสำหรับการบันทึกข้อมูล
  onSubmit(): void {
    // ตรวจสอบความถูกต้องของฟอร์ม
    if (this.plantedAreaForm.invalid) {
      this.showErrorAlert('กรุณากรอกข้อมูลให้ครบถ้วน');
      return;
    }
  
    // เตรียมข้อมูลที่ต้องการบันทึก
    const formData = this.plantedAreaForm.value;
    const plotName = formData.plot_name;
    const areaRai = this.areaInRai; // พื้นที่ที่คำนวณได้จากพิกัด
    const polygonLatLngs = this.polygonCoords.map(coord => new google.maps.LatLng(coord.lat, coord.lng));
  
    // เรียกใช้ captureMapImage เพื่อดึง Base64 ของภาพแผนที่
    this.captureMapImage(polygonLatLngs).then((imageUrl) => {
      // เตรียมข้อมูลที่จะส่งไปยัง API
      const plotData = {
        plot_id: this.plot_id,
        user_id: this.userId,
        plot_name: plotName,
        latlngs: this.polygonCoords, // ใช้ polygonCoords ที่เป็น LatLngLiteral[] แทน
        fileData: imageUrl, // ส่งข้อมูล Base64 ของภาพแผนที่
      };
  
      // ส่งข้อมูลไปที่ API เพื่อบันทึกแปลง
      this.plantedAreaService.updatePlot(plotData).pipe(take(1)).subscribe({
        next: (response) => {
          // หากบันทึกสำเร็จ
          Swal.fire({
            icon: 'success',
            title: 'บันทึกข้อมูลสำเร็จ',
            text: 'ข้อมูลแปลงถูกอัปเดตเรียบร้อยแล้ว'
          });
          // ปิด dialog หรือทำการเปลี่ยนเส้นทาง
          this.dialogRef.close(true);
        },
        error: (err) => {
          // หากเกิดข้อผิดพลาด
          console.error('Error updating plot:', err);
          this.showErrorAlert('ไม่สามารถบันทึกข้อมูลได้ กรุณาลองใหม่');
        }
      });
    }).catch((error) => {
      console.error('Error capturing map image:', error);
      this.showErrorAlert('ไม่สามารถจับภาพแผนที่ได้');
    });
  }
  
  
  
  // ฟังก์ชันสำหรับดึง Base64 ของรูปภาพ
  private captureMapImage(polygonCoords: google.maps.LatLng[]): Promise<string> {
    // คำนวณค่ากึ่งกลางของพอลิกอน
    const center = this.calculatePolygonCenter(polygonCoords);
  
    const lat = center.lat();
    const lng = center.lng();
    const zoom = this.zoom;
    const imageSize = '1024x1024';
    const mapType = 'satellite';
    const scale = 2;
  
    // เพิ่มจุดแรกในตำแหน่งสุดท้ายของพิกัดเพื่อให้เส้นเชื่อมจุดสุดท้ายกับจุดแรก
    const closedPolygonCoords = [...polygonCoords, polygonCoords[0]];
  
    // แปลงพิกัดของพอลิกอนเป็นรูปแบบสตริงสำหรับการร้องขอ API
    const polygonPath = closedPolygonCoords.map(coord => `${coord.lat()},${coord.lng()}`).join('|');
  
    // สร้าง URL ของภาพแผนที่ที่รวมพอลิกอน
    const mapImageUrl = `${this.staticMapsApiUrl}?center=${lat},${lng}&zoom=${zoom}&size=${imageSize}&maptype=${mapType}&scale=${scale}&path=color:0xFF0000%7Cweight:2%7C${polygonPath}&key=AIzaSyDF81bGnOY5TKIXzqN2wfWhTMZXMooP7LY&callback=initMap`;
  
    console.log('Map image URL:', mapImageUrl);
  
    return new Promise((resolve, reject) => {
      this.http.get(mapImageUrl, { responseType: 'blob' }).subscribe(
        (blob: Blob) => {
          const reader = new FileReader();
          reader.onloadend = () => {
            const base64data = (reader.result as string).split(',')[1];
            resolve(`data:image/png;base64,${base64data}`);
          };
          reader.readAsDataURL(blob);
        },
        error => {
          console.error('Error fetching map image:', error);
          reject('ไม่สามารถจับภาพแผนที่ได้');
        }
      );
    });
  }
  private calculatePolygonCenter(polygonCoords: google.maps.LatLng[]): google.maps.LatLng {
    let sumLat = 0;
    let sumLng = 0;
  
    // คำนวณผลรวมของละติจูดและลองจิจูดทั้งหมด
    polygonCoords.forEach(coord => {
      sumLat += coord.lat();
      sumLng += coord.lng();
    });
  
    // คำนวณค่าเฉลี่ยของละติจูดและลองจิจูด
    const centerLat = sumLat / polygonCoords.length;
    const centerLng = sumLng / polygonCoords.length;
  
    // คืนค่าจุดกึ่งกลางในรูปแบบ LatLng
    return new google.maps.LatLng(centerLat, centerLng);
  }
  private showErrorAlert(message: string): void {
    Swal.fire({
      icon: 'error',
      title: 'เกิดข้อผิดพลาด',
      text: message
    });
  }
}
