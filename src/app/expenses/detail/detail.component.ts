import { Component, Inject, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { ExpensesService } from '../expenses.service';

@Component({
  selector: 'app-detail',
  templateUrl: './detail.component.html',
  styleUrls: ['./detail.component.css']
})
export class DetailComponent implements OnInit, AfterViewInit {

  dataSource = new MatTableDataSource<any>(); // ‚úÖ ‡πÉ‡∏ä‡πâ MatTableDataSource
  displayedColumns: string[] = ['expenses_date', 'category', 'description']; // ‚úÖ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  loading: boolean = true;
  

  @ViewChild(MatPaginator) paginator!: MatPaginator; // ‚úÖ ‡πÉ‡∏ä‡πâ MatPaginator

  constructor(
    public dialogRef: MatDialogRef<DetailComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any,
    private expensesService: ExpensesService
  ) {}

  ngOnInit(): void {
    if (this.data.expense_id) {
      this.loadExpenseDetails(this.data.expense_id);
    } else {
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö expense_id');
      this.loading = false;
    }
  }

  ngAfterViewInit(): void {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Paginator ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ DataSource
    setTimeout(() => {
      if (this.paginator) {
        this.dataSource.paginator = this.paginator;
      }
    });
  }

  loadExpenseDetails(expenseId: string): void {
    debugger
    this.expensesService.getExpensesDetailById(expenseId).subscribe({
      next: (response) => {
        console.log('üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:', response);
        this.dataSource.data = response.expenses || []; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        this.loading = false;
      },
      error: (error) => {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        this.loading = false;
      }
    });
  }

  closeDialog(): void {
    this.dialogRef.close();
  }

}
