import { AfterViewInit, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { ExpensesService } from './expenses.service';
import Swal from 'sweetalert2';
import { FormBuilder, FormGroup } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { EditExpensesComponent } from './edit-expenses/edit-expenses.component';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { DetailComponent } from './detail/detail.component';

@Component({
  selector: 'app-expenses',
  templateUrl: './expenses.component.html',
  styleUrls: ['./expenses.component.css']
})
export class ExpensesComponent implements OnInit, AfterViewInit {
  @ViewChild('addFormSection') addFormSection!: ElementRef; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  @ViewChild('showPreviewSection') showPreviewSection!: ElementRef; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  @ViewChild('editFormSection') editFormSection!: ElementRef; // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  displayedColumns: string[] = ['expenses_date','plot_name', 'category', 'total_price', 'actions'];
  dataSource = new MatTableDataSource<any>([]);

  @ViewChild(MatPaginator) paginator!: MatPaginator;


  plotForm!: FormGroup;
  
  searchForm: FormGroup;
  showAddForm = false;
  showEditForm = false;
  showPreviewForm = false;
  plots: any[] = [];
  categories = [
    { value: '‡∏Ñ‡πà‡∏≤‡∏Æ‡∏≠‡∏£‡πå‡πÇ‡∏°‡∏ô', label: '‡∏Ñ‡πà‡∏≤‡∏Æ‡∏≠‡∏£‡πå‡πÇ‡∏°‡∏ô' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πã‡∏¢', label: '‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πã‡∏¢' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡∏´‡∏ç‡πâ‡∏≤', label: '‡∏Ñ‡πà‡∏≤‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡∏´‡∏ç‡πâ‡∏≤' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏ï‡∏±‡∏î‡∏ï‡πâ‡∏ô', label: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏ï‡∏±‡∏î‡∏ï‡πâ‡∏ô' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏õ‡∏•‡∏π‡∏Å', label: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏õ‡∏•‡∏π‡∏Å' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏â‡∏µ‡∏î‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡∏´‡∏ç‡πâ‡∏≤', label: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏â‡∏µ‡∏î‡∏¢‡∏≤‡∏Ü‡πà‡∏≤‡∏´‡∏ç‡πâ‡∏≤' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏â‡∏µ‡∏î‡∏¢‡∏≤‡∏Æ‡∏≠‡πÇ‡∏°‡∏ô', label: '‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ô‡∏â‡∏µ‡∏î‡∏¢‡∏≤‡∏Æ‡∏≠‡πÇ‡∏°‡∏ô' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô', label: '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô', label: '‡∏Ñ‡πà‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏°‡∏±‡∏ô' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', label: '‡∏Ñ‡πà‡∏≤‡∏ã‡πà‡∏≠‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', label: '‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' },
    { value: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô', label: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏ô' },
    { value: '‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∏‡∏î', label: '‡∏Ñ‡πà‡∏≤‡∏Ç‡∏∏‡∏î' }
  ];

  userId: string = '';
  selectedPlotIdForAddForm: number | null = null;
  selectedExpenseId: number | null = null;
selectedCategory: string | null = null;

  constructor(
    private fb: FormBuilder,
    private expensesService: ExpensesService,
    private translate: TranslateService
  ) {
    this.searchForm = this.fb.group({
      category: [''],
      startDate: [''],
      endDate: [''],
      plot: ['']
    });
  }

  ngOnInit() {
    this.userId = localStorage.getItem('userId') || '';
    this.fetchPlots();

     // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á plotForm ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
     this.plotForm = this.fb.group({
      selectedPlot: [null] // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô null (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á)
    });

    // Auto-search when form values change
    this.searchForm.valueChanges
      .pipe(debounceTime(300), distinctUntilChanged())
      .subscribe(() => this.onSearch());

    if (this.userId) {
      this.loadExpenses();
    }
  }

  ngAfterViewInit() {
    this.dataSource.paginator = this.paginator;
  }

  fetchPlots(): void {
    this.expensesService.getDeopPlot(this.userId).subscribe({
      next: (res: any) => {
        this.plots = res;
      },
      error: () => {
        this.showError('harvest.errorLoadingPlots');
      }
    });
  }

  loadExpenses(filters: any = {}) {
    console.log('filters', filters);
    this.expensesService.getExpenses(this.userId, filters).subscribe({
      next: (res: any) => {
        this.dataSource.data = res;
      }
    });
  }

  onSearch() {
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const filters = { ...this.searchForm.value };

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ plot_id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á
    const selectedPlot = this.plotForm?.get('selectedPlot')?.value;
    if (selectedPlot) {
        filters.plot = selectedPlot;
    }

    console.log("üîç ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", filters);
    
    this.loadExpenses(filters);
}


openAddExpense(): void {
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ plotId ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏õ‡∏•‡∏á
  this.selectedPlotIdForAddForm = this.plotForm?.get('selectedPlot')?.value || null;

  console.log("üìç plot_id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢:", this.selectedPlotIdForAddForm);

  this.showAddForm = !this.showAddForm; // ‚úÖ ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°
  this.showEditForm = false; // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  this.showPreviewForm = false; // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

  setTimeout(() => {
    if (this.addFormSection) {
        this.addFormSection.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    } else {
        console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö element addFormSection");
    }
  }, 100);
}



  closeForm() {
    debugger
    this.showAddForm = false; // ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    this.showEditForm = false; // ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    this.showPreviewForm = false; // ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à

    console.log('üì¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ loadExpenses()');
    this.loadExpenses();
  }
  handleCloseEditForm(): void {
    console.log('üì¢ handleCloseEditForm() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å');

    this.showEditForm = false; // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°
    this.selectedExpenseId = null; // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
    this.selectedCategory = null; // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤

    // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    this.loadExpenses();
}


  editExpense(expenseId: number, category: string): void {
    if (expenseId && category) { // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ expenseId ‡πÅ‡∏•‡∏∞ category ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        this.selectedExpenseId = expenseId;
        this.selectedCategory = category;
        this.showEditForm = true;
        this.showAddForm = false;
        this.showPreviewForm = false

        // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        setTimeout(() => {
            if (this.editFormSection) {
                this.editFormSection.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else {
                console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö element editFormSection");
            }
        }, 100);
    } else {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ: expenseId ‡∏´‡∏£‡∏∑‡∏≠ category ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        Swal.fire({
            icon: 'error',
            title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
    }
  
}

  deleteExpense(expenseId: number): void {
    Swal.fire({
      title: this.translate.instant('expense.deleteConfirmationTitle'),
      text: this.translate.instant('expense.deleteConfirmationText'),
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: this.translate.instant('expense.deleteConfirmationConfirm'),
      cancelButtonText: this.translate.instant('expense.deleteConfirmationCancel')
    }).then((result) => {
      if (result.isConfirmed) {
        this.expensesService.deleteExpense(expenseId).subscribe({
          next: () => {
            Swal.fire(
              this.translate.instant('expense.deleteSuccessTitle'),
              this.translate.instant('expense.deleteSuccessText'),
              'success'
            );
            this.loadExpenses();
          },
          error: () => {
            this.showError('expense.errorDelete');
          }
        });
      }
    });
  }

  clearSearch() {
    debugger
    this.searchForm.reset();
    this.loadExpenses();
  }

  private showError(translationKey: string) {
    this.translate.get(translationKey).subscribe((translations: { title: string; text: string }) => {
      Swal.fire({
        icon: 'error',
        title: translations.title,
        text: translations.text,
        timer: 3000,
        timerProgressBar: true
      });
    });
  }

  previewExpense(expenseId: number, category: string): void {
    if (expenseId && category) { // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ expenseId ‡πÅ‡∏•‡∏∞ category ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        this.selectedExpenseId = expenseId;
        this.selectedCategory = category;
        this.showEditForm = false;
        this.showAddForm = false;
        this.showPreviewForm = true

        // ‚úÖ ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        setTimeout(() => {
            if (this.showPreviewSection) {
                this.showPreviewSection.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
            } else {
                console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö element editFormSection");
            }
        }, 100);
    } else {
        console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ: expenseId ‡∏´‡∏£‡∏∑‡∏≠ category ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        Swal.fire({
            icon: 'error',
            title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!',
            confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á'
        });
    }
  
}


togglePlot(plotId: number): void {
  if (!this.plotForm) return;

  const currentPlot = this.plotForm.get('selectedPlot')?.value;

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô null (‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤)
  this.plotForm.get('selectedPlot')?.setValue(currentPlot === plotId ? null : plotId);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API ‡∏ï‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  this.onSearch();
}

isSelected(plotId: number): boolean {
  return this.plotForm.get('selectedPlot')?.value === plotId;
}

  
}
